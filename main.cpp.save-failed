// RPG.cpp : main project file.
#include "stdafx.h"
#include <iostream>
#include <string>
#include <vector>
#include <list>
#include <utility>
#include <cstdlib>
#include <ctime>

#include "atlas.h"
#include "dialogue.h"
#include "creature.h"
#include "item.h"
#include "weapons.h"
#include "armor.h"
#include "inventory.h"
#include "battle.h"



Creature dialogue_newchar();
void dialogue_menu(Creature& player);
void dialogue_explore(Creature& player);
void dialogue_forest(Creature& player);
void forestEvents(Creature& players);



int main(void)
{
    std::vector<Creature> creatureAtlas;
    std::vector<Item> itemAtlas;
    std::vector<Weapon> weaponAtlas;
    std::vector<Armor> armorAtlas;

    Creature player;

// Build the atlases
    buildatlas_creature(creatureAtlas);
    buildatlas_item(itemAtlas);
    buildatlas_weapon(weaponAtlas);
    buildatlas_armor(armorAtlas);

    srand(time(NULL));

   int result = Dialogue(
		"Welcome!",
		{"New Game"}).activate();
    switch(result)
        {
        case 1: player = dialogue_newchar(); break;
        default: return 0; break;
        }

    while(1)
        {	//If the player has died then inform them as such and close
            //the program
        if (player.health <= 0)
            {
            std::cout << "\t----YOU DIED----\n  Game Over\n";
            return 0;
            }

        result = Dialogue(
        "Menu\n====",
        {"Items","Equipment","Character","Explore"}).activate();
    switch(result)
	    {
	        //Print the items the player owns
        case 1:
            {
             std::cout <<"Items\n=====\n";
             player.inventory.print();
             std::cout << "---------------\n";
            int userInput = 0;

            //Cannot equip armor if they do not have any
            //Print a list of the armor and retrieve the amount
            //of armor in one go
            int numItems = player.inventory.print_items(true);
            if(numItems == 0)break;
  while(!userInput)
            {
                //Choose a piece of armor to equip
                std::cout << "Use which item?" << std::endl;
                std::cin >> userInput;
                //equipment is numbered but stored in a list
                //so the number must be converted into a list element
                if(userInput >= 1 && userInput <= numItems)
                    {
                    int i = 1;
                    for(auto it : player.inventory.items)
                        {
                        if(i++ == userInput)
                            {
                            //Equip the armor if it is found
                            player.useItem(it.first);

                            if(player.usedItem->heal > 0)
                            {
                             int j = player.usedItem->order;
                             player.health +=  player.usedItem->heal;
                             if(player.health > player.maxHealth)
                             player.health = player.maxHealth;
                             player.usedItem = nullptr;
                             player.inventory.remove_Item(&itemAtlas[j],1);
                             }
                            else if (player.usedItem->heal == 0)
                                {
                                std::cout << "This is not a valid item choice" << std::endl;

                                };

                            }


                            break;

                        }
                    }
            }

             break;
            }
	    //Print the equipment that the player is wearing (if they are
        //wearing anything) and then ask if hey want to equip a weapon
        //or some armor
        case 2:
            {
             std::cout << "Equipment\n=========\n";
             std::cout << "Head: "
             << (player.equippedArmor[Armor::Slot::HEAD] != nullptr ?
                 player.equippedArmor[Armor::Slot::HEAD]->name : "Nothing")
                 <<std::endl;
             std::cout << "Torso: "
             << (player.equippedArmor[Armor::Slot::TORSO] != nullptr ?
                 player.equippedArmor[Armor::Slot::TORSO]->name : "Nothing")
                 <<std::endl;
             std::cout << "Legs: "
             << (player.equippedArmor[Armor::Slot::LEGS] != nullptr ?
                 player.equippedArmor[Armor::Slot::LEGS]->name : "Nothing")
                 <<std::endl;
             std::cout << "Weapon: "
             <<  (player.equippedWeapon != nullptr  ?
                  player.equippedWeapon->name : "Nothing")
                  << std::endl;

             int result2=Dialogue(" ",{"Equip Armor","Equip Weapon", "Close"}).activate();
                //Equipping armor
                if(result2==1)
                    {
                    int userInput = 0;
                    //Cannot equip armor if they do not have any
                    //Print a list of the armor and retrieve the amount
                    //of armor in one go
                    int numItems = player.inventory.print_armor(true);
                    if(numItems == 0)break;

                    while(!userInput)
                        {
                        //Choose a piece of armor to equip
                        std::cout << "Equip which item?" << std::endl;
                        std::cin >> userInput;
                        //equipment is numbered but stored in a list
                        //so the number must be converted into a list element
                        if(userInput >= 1 && userInput <= numItems)
                            {
                            int i = 1;
                            for(auto it : player.inventory.armor)
                                {
                                if(i++ == userInput)
                                    {
                                    //Equip the armor if it is found
                                    player.equipArmor(it.first);
                                    break;
                                    }
                                }
                            }
                        }
                    }
                //Equip a weapon, using the same algorithms as for armor
                if(result2==2)
                {
                    int userInput = 0;

                    //Cannot equip armor if they do not have any
                    //Print a list of the armor and retrieve the amount
                    //of armor in one go
                    int numItems = player.inventory.print_weapons(true);
                    if(numItems == 0)break;

                    while(!userInput)
                    {
                        //Choose a piece of armor to equip
                        std::cout << "Equip which item?" << std::endl;
                        std::cin >> userInput;
                        //equipment is numbered but stored in a list
                        //so the number must be converted into a list element
                        if(userInput >= 1 && userInput <= numItems)
                        {
                            int i = 1;
                            for(auto it : player.inventory.weapons)
                            {
                                if(i++ == userInput)
                                {
                                    //Equip the armor if it is found
                                    player.equipWeapon(it.first);
                                    break;
                                }
                            }
                        }
                    }
                 }
                std::cout << "----------------\n";
                break;
            }
            // Output the character information, including name, class (if
            // they have one), stats, level, and experience
            case 3:
                {
                std::cout << "Character\n=========\n";
                std::cout << player.name;
                if(player.className != "") std::cout << " the " << player.className;
                std::cout << std::endl;

                std::cout << "HP: " << player.health << " / " << player.maxHealth << std::endl;
                std::cout << "Str: " << player.str << std::endl;
                std::cout << "End: " << player.end << std::endl;
                std::cout << "Dex: " << player.dex << std::endl;
                std::cout << "Lvl: " << player.level << " (" << player.exp;
                std::cout <<  " / " << player.expToLevel(player.level+1) << ")" << std::endl;
                std::cout << "----------------\n";

                break;
                }
/////////////////////////////////////////START OF EXPLORATION/////////////////////////////////////////////////////////
            case 4:
                {
                int result= Dialogue("Which area would you like to explore?",{"Forest","Cave"}).activate();
                switch(result)
                    {
                    case 1:
                      {
////////////////////////////////////////START FOREST EXPLORATION///////////////////////////////////////////////////
                      int result= Dialogue("You enter the forest. What do you do?",{"Go Deeper","Return"}).activate();
                      switch(result)
                        {
                        case 1:
//////////////////////////////////////////START FOREST EVENTS///////////////////////////////////////////////////////////////
                            int n;
                            n = rand();
                            if(n > 99)
                                {
                                n = n % 100;
                                };
                            if(n <= 50)
                                {
                                std::cout << "You find it difficult to move through the twisted trees but you find it to be a rewarding experience" << std::endl;
                                player.inventory.add_Item(&itemAtlas[2],1);
                                player.inventory.add_weapons(&weaponAtlas[1],1);

                                std::cout << "You found a Potion" << std::endl;
                                }
                            else if(n > 50)
                                {
                                std::cout << "As you venture deeper you find so exotic plants. What a thrill!" << std::endl;
////////////////////////////////////START GOBLIN FIGHT/////////////////////////////////////////////////////////////////
                                Battle(&player, &creatureAtlas[1]).run();
////////////////////////////////////LOOT CHANCE////////////////////////////////////////////////////////////////////////
                                int n;
                                n = rand();
                                if(n > 3)
                                {
                                  n = n % 4;
                                };
                                if( n==0);
                                else if(n==1)
                                {
                                player.inventory.add_Item(&itemAtlas[0],5);
                                std::cout << "You found 5 Gold Coins" << std::endl;

                                }
                                else
                                {
                                player.inventory.add_weapons(&weaponAtlas[0],1);
                                std::cout << "You found an Iron Dagger " << std::endl;

                                }
/////////////////////////////////////END GOBLIN FIGHT//////////////////////////////////////////////////////////////////
                                };
////////////////////////////////////RETURN TO CAMP////////////////////////////////////////////////////////////////////
                            case 2:
                                std::cout << "You decided to return to camp" << std::endl;
                            break;
                            default:
                            break;
                        }
////////////////////////////////////END FOREST EVENTS/////////////////////////////////////////////////////////////////
                    break;
                    }
/////////////////////////////START OF CAVE EVENTS/////////////////////////////////////////////////////////////////////
                    case 2:
                    break;
                    default:
                    break;
                    }
                }
         default:
         break;
        }
    };
return 0;
}

//New Character Menu

Creature dialogue_newchar()
{
	//ask for a name and class
	//Name does not use a dialogue since dialogues only request
	//options, not string input, could be generalised in its
	//own textinput class, but is not really necessary
	std::cout<< "Choose your name" <<std::endl;
	std::string name;
	std::cin >> name;

	int result = Dialogue(
                       "Choose your class",
                       {"Fighter", "Rogue", "Arrow Dude"}).activate();

	switch(result)
	{
		//Fighter class favors health and strength
	case 1:
		return Creature(name, 35, 20, 10, 10, 0, 10.0, 1, "Fighter");


		break;

		//Rogue class favors dexterity and hit rate
	case 2:
		return Creature(name, 30, 10, 10, 20, 0, 15.0, 1, "Rogue");


		break;
		//Default case that should never happen
		//but it's good to be safe
	case 3:
        return Creature(name, 25, 15, 10, 15, 0, 20.0, 1, "Arrow Dude");

        break;
	default:
		return Creature(name, 30, 10, 10, 10, 0, 10.0, 1, "Adventurer");


		break;
	}
}
